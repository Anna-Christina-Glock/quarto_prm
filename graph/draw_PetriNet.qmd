---
title: "Drawing Petri Nets"
format: 
    revealjs: 
      code-fold: false
      auto-stretch: false
      width: 1800
      height: 1000
jupyter: python3
author: "Anna-Christina Glock"

include-in-header: 
  text: |
    <style>
      .custom-small table {
        font-size: .55em
      }
      .hscroll {
        overflow-x: auto;
        white-space: nowrap;
        }
    </style>
---


## Build a Petri Net {.scrollable}
```{python code-fold="show"}
#| echo: false
#| code-fold: false
#| code-summary: "expand for full code"
#| class-output: hscroll
import pandas as pd
from datetime import datetime
import pm4py
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils
```

#### Creating an empty Petri Net
```{python code-fold="hide"}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
#| class-output: hscroll
#| output: false

# create an empty Petri Net
net = pm4py.PetriNet('petri_net_small')
```

#### Creating Places
```{python code-fold="hide"}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
#| class-output: hscroll
#| output: false
# creating source, p_1 and sink place
source = PetriNet.Place("source")
p2 = PetriNet.Place("p2")   
fin = PetriNet.Place("fin")
```

#### add the places to the Petri Net
```{python code-fold="hide"}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
#| class-output: hscroll
#| output: false
# add the places to the Petri Net
net.places.add(source)
net.places.add(p2)
net.places.add(fin)

```

#### Create transitions
```{python code-fold="hide"}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
#| class-output: hscroll
#| output: false
# Create transitions
t_1 = PetriNet.Transition("name_1", "t1")
```

#### Add the transitions to the Petri Net
```{python code-fold="hide"}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
#| class-output: hscroll
#| output: false
# Add the transitions to the Petri Net
net.transitions.add(t_1)
```

#### Add Arc's
```{python code-fold="hide"}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
#| class-output: hscroll
#| output: false
# Add Arc's
petri_utils.add_arc_from_to(source, t_1, net)
petri_utils.add_arc_from_to(p2, t_1, net)
petri_utils.add_arc_from_to(t_1, fin, net)
```

#### Create Markings
```{python}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
#| class-output: hscroll
initial_marking = Marking()
initial_marking[source] = 2
initial_marking[p2] = 1
final_marking = Marking()
final_marking[fin] = 1
```

#### Draw Petri Net
```{python}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
#| class-output: hscroll
pm4py.view_petri_net(net, initial_marking, final_marking)
```

## Beautify a Petri Net
```{python code-fold="hide"}
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: "expand for full code"
#| class-output: hscroll
def getDeco(petrinet,initial_marking,final_marking):    
    deco={}
    for pl in petrinet.places :
        if pl in initial_marking :
            deco[pl] = {'color':'green','label':''}
        if pl in final_marking :
            deco[pl] = {'color':'orange','label':''}
    return(deco)

```

```{python}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
#| class-output: hscroll
initial_marking = Marking()
initial_marking[source] = 2
initial_marking[p2] = 1
final_marking = Marking()
final_marking[fin] = 1

deco=getDeco(net, initial_marking, final_marking)
pm4py.view_petri_net(net, initial_marking, final_marking, decorations=deco)
```

## Build a Petri Net
### Running Example

```{python code-fold="hide"}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
#| class-output: hscroll
#| output: false
net = pm4py.PetriNet('new_petri_net')

# creating source, p_1 and sink place
source = PetriNet.Place("source")
p2 = PetriNet.Place("p2")   
p3 = PetriNet.Place("p3")   
p4 = PetriNet.Place("p4")   
p5 = PetriNet.Place("p5")   
p7 = PetriNet.Place("p7")
fin = PetriNet.Place("fin")

# add the places to the Petri Net
net.places.add(source)
net.places.add(p2)
net.places.add(p3)
net.places.add(p4)
net.places.add(p5)
net.places.add(p7)
net.places.add(fin)

# Create transitions
t_rr = PetriNet.Transition("name_1", "register request")
t_ct = PetriNet.Transition("name_2", "check ticket")
t_ec = PetriNet.Transition("name_3", "examine casually")
t_d = PetriNet.Transition("name_4", "decide")
t_rir = PetriNet.Transition("name_5", "reinitiate request")
t_rer = PetriNet.Transition("name_6", "reject request")

# Add the transitions to the Petri Net
net.transitions.add(t_rr)
net.transitions.add(t_ct)
net.transitions.add(t_ec)
net.transitions.add(t_d)
net.transitions.add(t_rir)
net.transitions.add(t_rer)

# Add Arc's
petri_utils.add_arc_from_to(source, t_rr, net)
petri_utils.add_arc_from_to(t_rr, p2, net)
petri_utils.add_arc_from_to(t_rr, p3, net)

petri_utils.add_arc_from_to(p2, t_ct, net)
petri_utils.add_arc_from_to(t_ct, p4, net)
petri_utils.add_arc_from_to(p3, t_ec, net)
petri_utils.add_arc_from_to(t_ec, p5, net)

petri_utils.add_arc_from_to(p4, t_d, net)
petri_utils.add_arc_from_to(p5, t_d, net)
petri_utils.add_arc_from_to(t_d, p7, net)

petri_utils.add_arc_from_to(p7, t_rir, net)
petri_utils.add_arc_from_to(t_rir, p2, net)
petri_utils.add_arc_from_to(t_rir, p3, net)
petri_utils.add_arc_from_to(p7, t_rer, net)
petri_utils.add_arc_from_to(t_rer, fin, net)
```


```{python}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
#| class-output: hscroll
initial_marking = Marking()
initial_marking[source] = 1
final_marking = Marking()
final_marking[fin] = 1

deco=getDeco(net, initial_marking, final_marking)
pm4py.view_petri_net(net, initial_marking, final_marking, decorations=deco)
```
